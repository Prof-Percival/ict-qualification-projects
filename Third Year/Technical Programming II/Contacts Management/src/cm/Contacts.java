/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cm;

/**
 *
 * @author Christoph Percival
 */

import java.awt.Color;
import java.awt.Dialog;
import java.awt.Font;
import java.awt.image.BufferedImage;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;

public class Contacts extends javax.swing.JFrame {

    /**
     * Creates new form Contacts
     */
    
    private static String name;
    private static String username;
    protected static int userId;
    public static int id;
    private static int position = 0;
    private static boolean updateImage = false;
    private String path = null;
    public static Contacts contacts;
    
    /**
     * Creates new form Contacts
     */
    public Contacts() 
    {
        initComponents();
        //Center Form
        this.setLocationRelativeTo(null);
        populateContactsTable();
        
        jTableContacts.setShowGrid(true);
        jTableContacts.setGridColor(Color.BLUE);
        jTableContacts.setSelectionBackground(Color.LIGHT_GRAY);
        
        JTableHeader th = jTableContacts.getTableHeader();
        th.setForeground(Color.BLUE);
        th.setFont(new Font("Tahoma", Font.BOLD, 14));
        
        id = 0;
        contacts = this;
        //th.setAlignmentX(CENTER_ALIGNMENT);
        
    }
    
    public Contacts(String username) throws IOException, FileNotFoundException, SQLException 
    {
        initComponents();
        //Center Form
        Contacts.username = username;
        getUserDetails();
        this.setLocationRelativeTo(null);
        populateContactsTable();
        
        jTableContacts.setShowGrid(true);
        jTableContacts.setGridColor(Color.BLUE);
        jTableContacts.setSelectionBackground(Color.LIGHT_GRAY);
        
        JTableHeader th = jTableContacts.getTableHeader();
        th.setForeground(Color.BLUE);
        th.setFont(new Font("Tahoma", Font.BOLD, 14));
        
        id = 0;
        contacts = this;
        //th.setAlignmentX(CENTER_ALIGNMENT);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panMain = new javax.swing.JPanel();
        panHeader = new javax.swing.JPanel();
        lblMinimize = new javax.swing.JLabel();
        lblClose = new javax.swing.JLabel();
        lblTextHeader = new javax.swing.JLabel();
        lblUserPicture = new javax.swing.JLabel();
        lblLoggedInUser = new javax.swing.JLabel();
        panBody = new javax.swing.JPanel();
        btnLogout = new javax.swing.JButton();
        lblLastName = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        lblPhone = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblPictureShow = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        cmbGroup = new javax.swing.JComboBox<>();
        jSeparatorVertical = new javax.swing.JSeparator();
        lblGroup = new javax.swing.JLabel();
        lblPicture = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        btnLoad = new javax.swing.JButton();
        btnAddContact = new javax.swing.JButton();
        jSeparatorHorizontal = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableContacts = new javax.swing.JTable();
        btnEditContact = new javax.swing.JButton();
        btnDeleteContact = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        jSeparatorHorizontal1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Contacts Management");
        setName("frmContacts"); // NOI18N
        setUndecorated(true);

        panHeader.setBackground(new java.awt.Color(46, 204, 113));

        lblMinimize.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblMinimize.setForeground(new java.awt.Color(255, 255, 255));
        lblMinimize.setText("-");
        lblMinimize.setToolTipText("Minimize");
        lblMinimize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblMinimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblMinimizelblMinimizeMouseClicked(evt);
            }
        });

        lblClose.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblClose.setForeground(new java.awt.Color(255, 0, 0));
        lblClose.setText("X");
        lblClose.setToolTipText("Exit");
        lblClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCloselblCloseMouseClicked(evt);
            }
        });

        lblTextHeader.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        lblTextHeader.setForeground(new java.awt.Color(255, 255, 255));
        lblTextHeader.setText("My Contacts");

        lblUserPicture.setBackground(new java.awt.Color(255, 255, 0));
        lblUserPicture.setToolTipText("Profile");
        lblUserPicture.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblUserPicture.setMaximumSize(new java.awt.Dimension(50, 50));
        lblUserPicture.setMinimumSize(new java.awt.Dimension(50, 50));
        lblUserPicture.setName(""); // NOI18N
        lblUserPicture.setOpaque(true);
        lblUserPicture.setPreferredSize(new java.awt.Dimension(50, 50));
        lblUserPicture.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblUserPictureMouseClicked(evt);
            }
        });

        lblLoggedInUser.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblLoggedInUser.setForeground(new java.awt.Color(253, 227, 167));
        lblLoggedInUser.setText("LoggedIn Person");

        javax.swing.GroupLayout panHeaderLayout = new javax.swing.GroupLayout(panHeader);
        panHeader.setLayout(panHeaderLayout);
        panHeaderLayout.setHorizontalGroup(
            panHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panHeaderLayout.createSequentialGroup()
                .addComponent(lblUserPicture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(lblLoggedInUser, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110)
                .addComponent(lblTextHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblMinimize, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblClose, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panHeaderLayout.setVerticalGroup(
            panHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblUserPicture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(lblLoggedInUser, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(lblTextHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(panHeaderLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(panHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMinimize)
                    .addComponent(lblClose)))
        );

        panBody.setBackground(new java.awt.Color(82, 179, 217));
        panBody.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        panBody.setLayout(null);

        btnLogout.setBackground(new java.awt.Color(242, 38, 19));
        btnLogout.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(255, 255, 255));
        btnLogout.setMnemonic('L');
        btnLogout.setText("Logout");
        btnLogout.setToolTipText("Logout");
        btnLogout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        panBody.add(btnLogout);
        btnLogout.setBounds(825, 7, 100, 35);

        lblLastName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblLastName.setForeground(new java.awt.Color(255, 255, 255));
        lblLastName.setText("Last Name:");
        panBody.add(lblLastName);
        lblLastName.setBounds(20, 60, 90, 30);

        txtLastName.setBackground(new java.awt.Color(228, 241, 254));
        txtLastName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtLastName.setForeground(new java.awt.Color(68, 108, 179));
        panBody.add(txtLastName);
        txtLastName.setBounds(130, 60, 210, 30);

        lblPhone.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblPhone.setForeground(new java.awt.Color(255, 255, 255));
        lblPhone.setText("Phone:");
        panBody.add(lblPhone);
        lblPhone.setBounds(20, 100, 90, 30);

        txtPhone.setBackground(new java.awt.Color(228, 241, 254));
        txtPhone.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtPhone.setForeground(new java.awt.Color(68, 108, 179));
        panBody.add(txtPhone);
        txtPhone.setBounds(130, 100, 210, 30);

        lblFirstName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblFirstName.setForeground(new java.awt.Color(255, 255, 255));
        lblFirstName.setText("First Name:");
        panBody.add(lblFirstName);
        lblFirstName.setBounds(20, 20, 90, 30);

        txtFirstName.setBackground(new java.awt.Color(228, 241, 254));
        txtFirstName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtFirstName.setForeground(new java.awt.Color(68, 108, 179));
        panBody.add(txtFirstName);
        txtFirstName.setBounds(130, 20, 210, 30);

        lblPictureShow.setBackground(new java.awt.Color(204, 255, 255));
        lblPictureShow.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblPictureShow.setForeground(new java.awt.Color(42, 62, 80));
        lblPictureShow.setOpaque(true);
        panBody.add(lblPictureShow);
        lblPictureShow.setBounds(520, 30, 140, 120);

        txtEmail.setBackground(new java.awt.Color(228, 241, 254));
        txtEmail.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        txtEmail.setForeground(new java.awt.Color(68, 108, 179));
        panBody.add(txtEmail);
        txtEmail.setBounds(130, 140, 210, 40);

        lblEmail.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblEmail.setForeground(new java.awt.Color(255, 255, 255));
        lblEmail.setText("Email:");
        panBody.add(lblEmail);
        lblEmail.setBounds(20, 150, 90, 30);

        cmbGroup.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbGroup.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Family", "Friend", "Work" }));
        cmbGroup.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panBody.add(cmbGroup);
        cmbGroup.setBounds(130, 190, 210, 30);

        jSeparatorVertical.setOrientation(javax.swing.SwingConstants.VERTICAL);
        panBody.add(jSeparatorVertical);
        jSeparatorVertical.setBounds(390, 20, 10, 300);

        lblGroup.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblGroup.setForeground(new java.awt.Color(255, 255, 255));
        lblGroup.setText("Group:");
        panBody.add(lblGroup);
        lblGroup.setBounds(20, 190, 90, 30);

        lblPicture.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblPicture.setForeground(new java.awt.Color(255, 255, 255));
        lblPicture.setText("Profile Picture:");
        panBody.add(lblPicture);
        lblPicture.setBounds(400, 20, 120, 30);

        lblAddress.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAddress.setForeground(new java.awt.Color(255, 255, 255));
        lblAddress.setText("Address:");
        panBody.add(lblAddress);
        lblAddress.setBounds(400, 150, 90, 30);

        jScrollPane1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        txtAddress.setBackground(new java.awt.Color(228, 241, 254));
        txtAddress.setColumns(20);
        txtAddress.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtAddress.setForeground(new java.awt.Color(68, 108, 179));
        txtAddress.setLineWrap(true);
        txtAddress.setRows(5);
        txtAddress.setTabSize(4);
        jScrollPane1.setViewportView(txtAddress);

        panBody.add(jScrollPane1);
        jScrollPane1.setBounds(520, 160, 260, 110);

        btnLoad.setBackground(new java.awt.Color(255, 255, 255));
        btnLoad.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnLoad.setMnemonic('o');
        btnLoad.setText("Load");
        btnLoad.setToolTipText("Load Image");
        btnLoad.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });
        panBody.add(btnLoad);
        btnLoad.setBounds(670, 30, 70, 25);

        btnAddContact.setBackground(new java.awt.Color(46, 204, 113));
        btnAddContact.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAddContact.setForeground(new java.awt.Color(255, 255, 255));
        btnAddContact.setMnemonic('A');
        btnAddContact.setText("Add");
        btnAddContact.setToolTipText("Add Contact");
        btnAddContact.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddContactActionPerformed(evt);
            }
        });
        panBody.add(btnAddContact);
        btnAddContact.setBounds(490, 286, 81, 30);
        panBody.add(jSeparatorHorizontal);
        jSeparatorHorizontal.setBounds(10, 320, 910, 10);

        jTableContacts.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTableContacts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableContacts.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTableContacts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableContactsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableContacts);

        panBody.add(jScrollPane2);
        jScrollPane2.setBounds(10, 330, 910, 280);

        btnEditContact.setBackground(new java.awt.Color(30, 139, 195));
        btnEditContact.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnEditContact.setForeground(new java.awt.Color(255, 255, 255));
        btnEditContact.setMnemonic('E');
        btnEditContact.setText("Edit");
        btnEditContact.setToolTipText("Edit Contact");
        btnEditContact.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditContactActionPerformed(evt);
            }
        });
        panBody.add(btnEditContact);
        btnEditContact.setBounds(610, 286, 81, 30);

        btnDeleteContact.setBackground(new java.awt.Color(242, 38, 19));
        btnDeleteContact.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnDeleteContact.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteContact.setMnemonic('D');
        btnDeleteContact.setText("Delete");
        btnDeleteContact.setToolTipText("Delete Contact");
        btnDeleteContact.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeleteContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteContactActionPerformed(evt);
            }
        });
        panBody.add(btnDeleteContact);
        btnDeleteContact.setBounds(730, 286, 81, 30);

        btnPrevious.setBackground(new java.awt.Color(255, 255, 255));
        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPrevious.setText("<");
        btnPrevious.setToolTipText("Previous Contact");
        btnPrevious.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });
        panBody.add(btnPrevious);
        btnPrevious.setBounds(120, 290, 70, 25);

        btnFirst.setBackground(new java.awt.Color(255, 255, 255));
        btnFirst.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnFirst.setText("<<");
        btnFirst.setToolTipText("First Contact");
        btnFirst.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        panBody.add(btnFirst);
        btnFirst.setBounds(40, 290, 70, 25);

        btnLast.setBackground(new java.awt.Color(255, 255, 255));
        btnLast.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnLast.setText(">>");
        btnLast.setToolTipText("Last Contact");
        btnLast.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        panBody.add(btnLast);
        btnLast.setBounds(280, 290, 70, 25);

        btnNext.setBackground(new java.awt.Color(255, 255, 255));
        btnNext.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnNext.setText(">");
        btnNext.setToolTipText("Next Contact");
        btnNext.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        panBody.add(btnNext);
        btnNext.setBounds(200, 290, 70, 25);
        panBody.add(jSeparatorHorizontal1);
        jSeparatorHorizontal1.setBounds(10, 280, 910, 10);

        javax.swing.GroupLayout panMainLayout = new javax.swing.GroupLayout(panMain);
        panMain.setLayout(panMainLayout);
        panMainLayout.setHorizontalGroup(
            panMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panBody, javax.swing.GroupLayout.PREFERRED_SIZE, 930, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        panMainLayout.setVerticalGroup(
            panMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMainLayout.createSequentialGroup()
                .addComponent(panHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panBody, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void populateContactsTable()
    {
        ContactQuery contactQuery = new ContactQuery();
        
        ArrayList<Contact> cList = contactQuery.contactList(userId);
        String[] columns = {"DatabaseId", "Id", "First Name", "Last Name", "Group", "Phone", "Email", "Address","Image"};
        Object[][] rows = new Object[cList.size()][9];
        
        for (int i = 0; i < cList.size(); i++)
        {
            rows[i][0] = cList.get(i).getContactId();
            rows[i][1] = i + 1;
            rows[i][2] = cList.get(i).getFirstName();
            rows[i][3] = cList.get(i).getLastName();
            rows[i][4] = cList.get(i).getGroup();
            rows[i][5] = cList.get(i).getPhone();
            rows[i][6] = cList.get(i).getEmail();
            rows[i][7] = cList.get(i).getAddress();
            
            ImageIcon image = new ImageIcon(new ImageIcon(cList.get(i).getPicture()).getImage().getScaledInstance(70, 40, java.awt.Image.SCALE_SMOOTH));
            
            rows[i][8] = image;
        }
        
        TableModel tableModel = new TableModel(rows, columns);
        jTableContacts.setModel(tableModel);
        jTableContacts.setRowHeight(40);
        //Hide Column with Id From Database
        jTableContacts.getColumnModel().getColumn(0).setWidth(0);
        jTableContacts.getColumnModel().getColumn(0).setMinWidth(0);
        jTableContacts.getColumnModel().getColumn(0).setMaxWidth(0); 

        //Align Values in Id Column To Center
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER);
        jTableContacts.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        //Reduce Width of Column Id
        jTableContacts.getColumnModel().getColumn(1).setWidth(40);
        jTableContacts.getColumnModel().getColumn(1).setMinWidth(40);
        jTableContacts.getColumnModel().getColumn(1).setMaxWidth(60); 
        jTableContacts.getColumnModel().getColumn(1).setPreferredWidth(40); 
        
        //Set Min & Max Width for Column Image 
        jTableContacts.getColumnModel().getColumn(8).setWidth(70);
        jTableContacts.getColumnModel().getColumn(8).setMinWidth(70);
        jTableContacts.getColumnModel().getColumn(8).setMaxWidth(70);
    }
    
    private void lblMinimizelblMinimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblMinimizelblMinimizeMouseClicked
        // Minimize Form
        this.setState((JFrame.ICONIFIED));
    }//GEN-LAST:event_lblMinimizelblMinimizeMouseClicked

    private void lblCloselblCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloselblCloseMouseClicked
        // Close App
        switch(JOptionPane.showConfirmDialog(null, "Are You Sure You Want To Exit?", "Exit", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)){
            case JOptionPane.YES_OPTION -> System.exit(0);
        }
    }//GEN-LAST:event_lblCloselblCloseMouseClicked

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // Close App
        switch(JOptionPane.showConfirmDialog(null, "Are You Sure You Want To Logout?", "Logout", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)){
            case JOptionPane.YES_OPTION ->
            {
                // Open Login Form
                Login login = new Login();
                login.setVisible(true);
                login.pack();
                login.setLocationRelativeTo(null);
                login.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                this.dispose();
            }
        }
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        Image image = new Image();
        path = image.browse(lblPictureShow);
        updateImage = true;
    }//GEN-LAST:event_btnLoadActionPerformed
    
    private void btnAddContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddContactActionPerformed
        //Name Validation
        //First Name
        if (!Details.nameIsValid(txtFirstName, "First Name"))
        {
            return;
        }
        
        //Last Name
        if (!Details.nameIsValid(txtLastName, "Last Name"))
        {
            return;
        }
        
        //Phone Validation
        if (!Details.phoneIsValid(txtPhone, txtPhone.getText()))
        {
            return;
        }
        
        //Check If Phone Exists
        if (Details.phoneExists(txtPhone.getText()))
        {
            return;
        }
        
         //Email Validation
        if (!Details.emailIsValid(txtEmail, txtEmail.getText()))
        {
            return;
        }
        
        //Check If Email Exists
        if (Details.emailExists(txtEmail.getText()))
        {
            return;
        }
        
         //Picture Validation
        if (!Details.imageAttached(path))
        {
            return;
        }
        

        //Address Validation
        if (!Details.addressValid(txtAddress))
        {
            return;
        }
        
        //Get New Contact Details Ready
        String _name = txtFirstName.getText();
        String surname = txtLastName.getText();
        String phone = txtPhone.getText();
        String email = txtEmail.getText();
        String group = cmbGroup.getSelectedItem().toString();
        String address = txtAddress.getText();
        byte[] image = null;
        
        try {
            Path imagepath = Paths.get(path);
            image = Files.readAllBytes(imagepath);
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(Contacts.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        //Validation Complete. Now Send Data To Database
        switch(JOptionPane.showConfirmDialog(null, "Are You Sure You Want To Add The Contact?", "Adding Contact", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE))
        {
            case JOptionPane.YES_OPTION -> 
            {
                updateImage = false;
                
                //Create an Instance of Contact
                Contact contact = new Contact(0, _name, surname, phone, email, group, address, image, userId);

                //Insert Details Into Database
                ContactQuery contactQuery = new ContactQuery();
                contactQuery.insertContact(contact);
                populateContactsTable();
                clearFields();
            }
        }
    }//GEN-LAST:event_btnAddContactActionPerformed

    private void jTableContactsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableContactsMouseClicked
        updateImage = false;
        // Display Selected Row Values in TextBoxes, etc
        //Selected Row Index
        int rowIndex = jTableContacts.getSelectedRow();
        position = rowIndex;
        id = (int)jTableContacts.getValueAt(rowIndex, 0);
        txtFirstName.setText(jTableContacts.getValueAt(rowIndex, 2).toString());
        txtLastName.setText(jTableContacts.getValueAt(rowIndex, 3).toString());
        cmbGroup.setSelectedItem(jTableContacts.getValueAt(rowIndex, 4).toString());
        txtPhone.setText(jTableContacts.getValueAt(rowIndex, 5).toString());
        txtEmail.setText(jTableContacts.getValueAt(rowIndex, 6).toString());
        txtAddress.setText(jTableContacts.getValueAt(rowIndex, 7).toString());
        
        
        //java.awt.Image img = ((ImageIcon)jTableContacts.getValueAt(rowIndex, 7)).getImage().getScaledInstance(lblPictureShow.getWidth(), lblPictureShow.getHeight(), java.awt.Image.SCALE_SMOOTH);
        
        //ImageIcon imgIcon = new ImageIcon(img);
        
        try
        {
            Connection con = Database.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            
            ps = con.prepareStatement("SELECT Picture FROM contact WHERE id = " + id);
            rs = ps.executeQuery();
            
            if (rs.next())
            {
                BufferedImage img = ImageIO.read(rs.getBinaryStream("Picture"));
                Image image = new Image();
                lblPictureShow.setIcon(image.resizeImage(img, lblPictureShow.getWidth(), lblPictureShow.getHeight()));
                
                //return;
            }
        }
        catch(IOException | SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Searching Picture", JOptionPane.ERROR_MESSAGE);
            System.out.println(ex.getMessage());
            //return;
        }
        
        //lblPictureShow.setIcon(imgIcon);
    }//GEN-LAST:event_jTableContactsMouseClicked

    private void btnDeleteContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteContactActionPerformed
        //Check If There's A Contact Selected
        if (id == 0)
        {
            JOptionPane.showMessageDialog(null, "Select A Contact To Delete", "Delete Contact", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Delete Contact
        switch(JOptionPane.showConfirmDialog(null, "Are You Sure You Want To Delete The Contact?", "Delete Contact", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE))
        {
            case JOptionPane.YES_OPTION ->
            {
                ContactQuery contactQuery = new ContactQuery();
                contactQuery.deleteContact(id);
                id = 0;
                updateImage = false;
                populateContactsTable();
                clearFields();   
            }
        }
        
    }//GEN-LAST:event_btnDeleteContactActionPerformed

    private void btnEditContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditContactActionPerformed
        //Check If There's A Contact Selected
        if (id == 0)
        {
            JOptionPane.showMessageDialog(null, "Select A Contact To Edit", "Edit Contact", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //Name Validation
        //First Name
        if (!Details.nameIsValid(txtFirstName, "First Name"))
        {
            return;
        }
        
        //Last Name
        if (!Details.nameIsValid(txtLastName, "Last Name"))
        {
            return;
        }
        
        //Phone Validation
        if (!Details.phoneIsValid(txtPhone, txtPhone.getText()))
        {
            return;
        }
        
        //Check If Phone Exists
        if (Details.phoneExists(txtPhone.getText()))
        {
            return;
        }
        
         //Email Validation
        if (!Details.emailIsValid(txtEmail, txtEmail.getText()))
        {
            return;
        }
        
        //Check If Email Exists
        if (Details.emailExists(txtEmail.getText()))
        {
            return;
        }
        

        //Address Validation
        if (!Details.addressValid(txtAddress))
        {
            return;
        }
        
        //Get New Contact Details Ready
        String _name = txtFirstName.getText();
        String surname = txtLastName.getText();
        String phone = txtPhone.getText();
        String email = txtEmail.getText();
        String group = cmbGroup.getSelectedItem().toString();
        String address = txtAddress.getText();
        byte[] image = null;
        
        boolean withImg = false;
        if (updateImage)
        {
            try {
                Path imagepath = Paths.get(path);
                image = Files.readAllBytes(imagepath);
                withImg = true;
            } 
            catch (IOException ex) 
            {
                Logger.getLogger(Contacts.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
        else
        {
            
        }
        
        
        
        //Validation Complete. Now Send Data To Database
        switch(JOptionPane.showConfirmDialog(null, "Are You Sure You Want To Edit The Contact?", "Update Contact", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE))
        {
            case JOptionPane.YES_OPTION -> 
            {
                //Create an Instance of Contact
                Contact contact = new Contact(id, _name, surname, phone, email, group, address, image, userId);

                //Insert Details Into Database
                ContactQuery contactQuery = new ContactQuery();
                contactQuery.updateContact(contact, withImg);
                
                updateImage = false;
                
                populateContactsTable();
                clearFields();
            }
        }
    }//GEN-LAST:event_btnEditContactActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        if (position > 0)
        {
            position -= 1;
            displayContact(position);
        }
        else
            if (jTableContacts.getRowCount() == 0)
            {
                JOptionPane.showMessageDialog(null, "There Are No Contacts In Your Contacts List", "Contacts List", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "You Are Already On The First Contact", "Contacts List", JOptionPane.INFORMATION_MESSAGE);
            }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        if (! (jTableContacts.getRowCount() == 0))
        {
            position = jTableContacts.getRowCount() - 1;
            displayContact(position);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "There Are No Contacts In Your Contacts List", "Contacts List", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if (position < jTableContacts.getRowCount() - 1)
        {
            position += 1;
            displayContact(position);
        }
        else
            if (jTableContacts.getRowCount() == 0)
            {
                JOptionPane.showMessageDialog(null, "There Are No Contacts In Your Contacts List", "Contacts List", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "You Are Already On The Last Contact", "Contacts List", JOptionPane.INFORMATION_MESSAGE);
            }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        if (! (jTableContacts.getRowCount() == 0))
        {
            position = 0;
            displayContact(position);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "There Are No Contacts In Your Contacts List", "Contacts List", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnFirstActionPerformed

    private void lblUserPictureMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUserPictureMouseClicked
        //Display Profile
        Profile profile = new Profile(new javax.swing.JFrame(), true);
        profile.pack();
        profile.setLocationRelativeTo(null);
        profile.setVisible(true);
    }//GEN-LAST:event_lblUserPictureMouseClicked

    //Display Data using First, Last, Previous, Next Buttons
    private void displayContact(int index)
    {
        updateImage = false;
        // Display Selected Row Values in TextBoxes, etc
        id = (int)jTableContacts.getValueAt(index, 0);
        txtFirstName.setText(jTableContacts.getValueAt(index, 2).toString());
        txtLastName.setText(jTableContacts.getValueAt(index, 3).toString());
        cmbGroup.setSelectedItem(jTableContacts.getValueAt(index, 4).toString());
        txtPhone.setText(jTableContacts.getValueAt(index, 5).toString());
        txtEmail.setText(jTableContacts.getValueAt(index, 6).toString());
        txtAddress.setText(jTableContacts.getValueAt(index, 7).toString());
        
        try
        {
            Connection con = Database.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            
            ps = con.prepareStatement("SELECT Picture FROM contact WHERE id = " + id);
            rs = ps.executeQuery();
            
            if (rs.next())
            {
                BufferedImage img = ImageIO.read(rs.getBinaryStream("Picture"));
                Image image = new Image();
                lblPictureShow.setIcon(image.resizeImage(img, lblPictureShow.getWidth(), lblPictureShow.getHeight()));
            }
        }
        catch(IOException | SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Searching Picture", JOptionPane.ERROR_MESSAGE);
            System.out.println(ex.getMessage());
        }
    }
    //Metod To Clear TextBoxes
    private void clearFields()
    {
        txtFirstName.setText("");
        txtLastName.setText("");
        txtPhone.setText("");
        txtEmail.setText("");
        txtAddress.setText("");
        cmbGroup.setSelectedIndex(0);
        lblPictureShow.setIcon(new ImageIcon()); 
        updateImage = false;
        path = null;
        id = 0;
    }
    //Get User Details
    private void getUserDetails()
    {
        try
        {
            Connection con = Database.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            
            ps = con.prepareStatement("SELECT id, FirstName, LastName, Picture FROM persons WHERE Username LIKE ?");
            ps.setString(1, username);
            
            rs = ps.executeQuery();
            
            if (rs.next())
            {
                userId = rs.getInt(1);
                name = rs.getString(2) + " " + rs.getString(3);
                lblLoggedInUser.setText(name);
                
                BufferedImage img = ImageIO.read(rs.getBinaryStream("Picture"));
                Image image = new Image();
                lblUserPicture.setIcon(image.resizeImage(img, lblUserPicture.getWidth(), lblUserPicture.getHeight()));
                
                //return;
            }
        }
        catch(IOException | SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Searching User Details", JOptionPane.ERROR_MESSAGE);
            System.out.println(ex.getMessage());
            //return;
        }
    }
    
    public void refreshProfile()
    {
        //Update Profile DEtails on Labels
        getUserDetails();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Contacts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Contacts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Contacts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Contacts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Contacts().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddContact;
    private javax.swing.JButton btnDeleteContact;
    private javax.swing.JButton btnEditContact;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JComboBox<String> cmbGroup;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparatorHorizontal;
    private javax.swing.JSeparator jSeparatorHorizontal1;
    private javax.swing.JSeparator jSeparatorVertical;
    private javax.swing.JTable jTableContacts;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblClose;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblGroup;
    private javax.swing.JLabel lblLastName;
    public javax.swing.JLabel lblLoggedInUser;
    private javax.swing.JLabel lblMinimize;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblPicture;
    private javax.swing.JLabel lblPictureShow;
    private javax.swing.JLabel lblTextHeader;
    private javax.swing.JLabel lblUserPicture;
    private javax.swing.JPanel panBody;
    private javax.swing.JPanel panHeader;
    private javax.swing.JPanel panMain;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
